% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gis.R
\name{GIS}
\alias{GIS}
\alias{get_map}
\alias{add_map}
\alias{is.sf}
\alias{as.sf}
\alias{crop_certe}
\alias{filter_sf}
\alias{filter_geolocation}
\alias{latitude}
\alias{longitude}
\title{Geodata Functions}
\usage{
get_map(maptype = "postcodes4")

add_map(data, maptype = NULL, by = NULL, crop_certe = TRUE)

is.sf(sf_data)

as.sf(data)

crop_certe(sf_data)

filter_sf(sf_data, xmin = NULL, xmax = NULL, ymin = NULL, ymax = NULL)

filter_geolocation(sf_data, ..., col_zipcode = NULL)

latitude(sf_data)

longitude(sf_data)
}
\arguments{
\item{maptype}{type of geometric data, must be one of: \code{"gemeenten"}, \code{"ggdregios"}, \code{"nuts3"}, \code{"postcodes2"}, \code{"postcodes3"}, \code{"postcodes4"}, \code{"postcodes6"}, \code{"provincies"}. For \code{\link[=add_map]{add_map()}}, this is determined automatically if left blank.}

\item{data}{data set to join left to the geodata}

\item{by}{column to join by}

\item{crop_certe}{\link{logical} to keep only the Certe region}

\item{sf_data}{a data set of class 'sf'}

\item{xmin, xmax, ymin, ymax}{coordination filters for \code{sf_data}, given in degrees following \href{https://epsg.io/4326}{EPSG:4326} ('WGS 84')}

\item{...}{filters to set}

\item{col_zipcode}{column with zip codes}
}
\value{
An \code{sf} model. The column with geodata is always called \code{"geometry"}.
}
\description{
These are functions to work with geographical data. To determine coordinates based on a location (or vice versa), use \code{\link[=geocode]{geocode()}} / \code{\link[=reverse_geocode]{reverse_geocode()}}.
}
\details{
All of these functions will check if the \code{sf} package is installed, and will load its namespace (but not attach the package).

\code{\link[=crop_certe]{crop_certe()}} cuts any geometry on the Certe region (more or less the Northern three provinces of the Netherlands).

\code{\link[=filter_sf]{filter_sf()}} filters an sf object on coordinates, and is internally used by \code{\link[=crop_certe]{crop_certe()}}.

\code{\link[=latitude]{latitude()}} specifies the north-south position ('y axis') and \code{\link[=longitude]{longitude()}} specifies the east-west position ('x axis'). They return the numeric coordinate of the centre of a simple feature.
}
\examples{
get_map() # defaults to the geo_postcodes4 data set

data.frame(postcode = 7753, number_of_cases = 3) |> 
  add_map()

geo_provincies |> crop_certe()

# filter on a latitude of 52.5 degrees and higher
geo_provincies |> filter_sf(ymin = 52.5)

if (require("certeplot2")) {

  geo_postcodes4 |> 
    filter_geolocation(gemeente == "Tytsjerksteradiel") |> 
    plot2(category = inwoners,
          datalabels = postcode)

}

latitude(geo_provincies)
longitude(geo_provincies)
}
