% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geocoding.R
\name{geocoding}
\alias{geocoding}
\alias{get_coordinates}
\alias{get_addresses}
\title{Geocoding to Translate Addresses <-> Coordinates}
\usage{
get_coordinates(
  search,
  api = "https://nominatim.openstreetmap.org/search?q={search}&format=json"
)

get_addresses(
  sf_data,
 
    api = "https://nominatim.openstreetmap.org/reverse?lat={latitude}&lon={longitude}&format=json"
)
}
\arguments{
\item{search}{a (vector of) search string(s), such as an address or name}

\item{api}{URL of the application programming interface, defaults to OpenStreetMap}

\item{sf_data}{an 'sf' object or an 'sfc' object (i.e., a vector with geometric \code{sfc_POINT}s). Can also be a character vector, in which case \code{\link[=get_coordinates]{get_coordinates()}} will be called first.}
}
\description{
Geocoding to Translate Addresses <-> Coordinates
}
\details{
These functions use \href{https://openstreetmap.org}{OpenStreetMap (OSM)}.

\code{\link[=get_coordinates]{get_coordinates()}} provides geocoding (looking up the coordinates of a place) and returns an 'sfc' geometry object. For the results, preference is given to places in the Northern Netherlands using [\code{\link[=crop_certe]{crop_certe()}}.

\code{\link[=get_addresses]{get_addresses()}} provides reversed-geocoding (looking up the place of coordinates) and returns a \link{data.frame} with the columns "address", "zipcode" and "city".

For both functions, the OSM API will only be called on unique input values, to increase speed.
}
\examples{
# geocoding: retrieve sfc points of addresses
sfc <- get_coordinates("Van Swietenlaan 2, Groningen")
sfc

# reversed-geocoding: get the addresses
get_addresses(sfc)

# or use search parameters:
get_addresses(c("Certe NL", "IKEA Groningen"))

coord <- get_coordinates(c("Van Swietenlaan 2, Groningen"),
                           "Jelsumerstraat 6, Leeuwarden",
                           "Medisch Centrum Leeuwarden"))
coord

if (require("certeplot2")) {
  geo_gemeenten \%>\%
    crop_certe() \%>\%
    plot2() # \%>\%
    # add_coordinates(coord, colour = "certeroze")
}
}
